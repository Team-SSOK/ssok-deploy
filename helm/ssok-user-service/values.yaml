image:
  repository: kudong/ssok-user-service
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  name: web
  port: 80
  targetPort: 8080
  grpc:
    name: grpc
    port: 9090
    targetPort: 9090

notification:
  profile: "[DEV]"
  webhook-url: aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM4MjExNzgxOTI4MTU3NjExNi92dUFIVFVVb19qdmpIeExQTjFjTnRZR1RmZW0tVTBudzN2Y25ZUkVUT3YyU2s3d3p3VFAwQmROS3hnR1I5Z0pYcGhQcw==
  ssom-url: "aHR0cDovL3Nzb20tYmFja2VuZC5zc29tLnN2Yy5jbHVzdGVyLmxvY2FsOjgwODAvYXBpL2FsZXJ0L2Rldm9wcw==" # http://ssom-backend.ssom.svc.cluster.local:8080/api/alert/devops
 
# resources:
#   requests:
#     cpu: "200m"      # 최소 0.2 CPU 코어
#     memory: "512Mi"  # 512MB
#   limits:
#     cpu: "500m"     # 최대 0.5 CPU 코어
#     memory: "1Gi"    # 1GB 

hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 90 # CPU 이용률 90% 이상시
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300 # 5분 대기, 30초 주기, 점진적 감소
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
    scaleUp:
      stabilizationWindowSeconds: 0 # 0초 대기, 15초 주기, 최대 증가
      policies:
      - type: Percent
        value: 100          # 현재 Pod 수의 100% 증가
        periodSeconds: 15   # 15초마다
      - type: Pods          
        value: 2            # 또는 2개씩 증가
        periodSeconds: 15   # 15초마다
      selectPolicy: Max # 정책 2개중 가장 큰것을 선택

applicationConfig:
  server:
    port: 8080
  spring:
    application:
      name: ssok-user-service
    cloud:
      kubernetes:
        config:
          enabled: true
          name: ssok-user-service
          namespace: ssok
          sources:
            - name: ssok-user-service
        secrets:
          enabled: false
        reload:
          enabled: true
        discovery:
          all-namespaces: false
        loadbalancer:
          mode: service
    jpa:
      hibernate:
        ddl-auto: update
      properties:
        hibernate:
          format_sql: false
          show-sql: false
  management:
    endpoints:
      web:
        exposure:
          include: health,info,prometheus
    endpoint:
      health:
        show-details: always
        show-components: always
        probes:
          enabled: true
    prometheus:
      metrics:
        export:
          enabled: true
    health:
      kubernetes:
        enabled: false
    metrics:
      tags:
        application: ssok-user-service
  feign:
    client:
      config:
        default:
          connectTimeout: 20000
          readTimeout: 20000
          loggerLevel: full
    hystrix:
      command:
        default:
          execution:
            isolation:
              thread:
                timeoutInMilliseconds: 30000

fluentbit:
  fluentBitConf: |-
    [SERVICE]
        Flush         1
        Daemon        Off
        Log_Level     info
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    [INPUT]
        Name              tail
        Path              /var/log/ssok-user-service.log
        Parser            json
        Tag               user.log
        Refresh_Interval  5
        Mem_Buf_Limit     10MB
        Skip_Long_Lines   On

    [OUTPUT]
        Name              forward
        Match             user.*
        Host              fluentd-aggregator.logging.svc.cluster.local
        Port              24224

  parsersConf: |-
    [PARSER]
        Name              json
        Format            json
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z

secrets:
  datasource:
    url: jdbc:postgresql://localhost:5432/mydb
    username: root
    password: "1234"
  redis:
    host: localhost
    port: "6379"
  jwt:
    accessValidity: ""
    refreshValidity: ""
    secret: ""
  notificationService:
    url: ""
  bankService:
    url: ""
  aligo:
    apiKey: ""
    userId: ""
    sender: ""
  aws:
    s3AccessKey: ""
    s3SecretKey: ""
    s3Region: ""
    s3Bucket: ""
    s3ProfilePath: ""
  authWhitelist: "/api/auth/login,/api/auth/refresh,/api/users/signup,/api/users/phone,/api/users/phone/verify"
  grpc:
    userService:
      port: ""