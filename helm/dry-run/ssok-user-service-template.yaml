---
# Source: ssok-user-service/templates/hpa.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ssok-user-service-pdb
  namespace: ssok
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ssok-user-service
      app.kubernetes.io/instance: ssok-user-service
---
# Source: ssok-user-service/templates/batch.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ssok-user-service-discord-webhook
  namespace: ssok
type: Opaque
stringData:
  webhook-url: https://discord.com/api/webhooks/1377886188312068146/eFtja7Ax7h84bD9z5CZhm7jligL1wDIRRLvQgr-UnxnACEUSkyI4Gm9NsenVFwnwKnLK
---
# Source: ssok-user-service/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ssok-user-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-user-service
    app.kubernetes.io/instance: ssok-user-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  SPRING_DATASOURCE_URL:                   "jdbc:postgresql://localhost:5432/mydb"
  SPRING_DATASOURCE_USERNAME:              "root"
  SPRING_DATASOURCE_PASSWORD:              "1234"
  SPRING_DATA_REDIS_HOST:                  "localhost"
  SPRING_DATA_REDIS_PORT:                  "6379"
  JWT_ACCESS_TOKEN_VALIDITY_SECONDS:       ""
  JWT_REFRESH_TOKEN_VALIDITY_SECONDS:      ""
  JWT_SECRET:                              ""
  EXTERNAL_NOTIFICATION_SERVICE_URL:       ""
  EXTERNAL_BANK_SERVICE_URL:               ""
  ALIGO_API_KEY:                           ""
  ALIGO_USER_ID:                           ""
  ALIGO_SENDER:                            ""
  AWS_S3_ACCESS_KEY:                       ""
  AWS_S3_SECRET_KEY:                       ""
  AWS_S3_REGION:                           ""
  AWS_S3_BUCKET:                           ""
  AWS_S3_PROFILE_IMAGE_PATH:               ""
  AUTH_WHITELIST:                          "/api/auth/login,/api/auth/refresh,/api/users/signup,/api/users/phone,/api/users/phone/verify"
---
# Source: ssok-user-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ssok-user-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-user-service
    app.kubernetes.io/instance: ssok-user-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |
    feign:
      client:
        config:
          default:
            connectTimeout: 20000
            loggerLevel: full
            readTimeout: 20000
      hystrix:
        command:
          default:
            execution:
              isolation:
                thread:
                  timeoutInMilliseconds: 30000
    health:
      kubernetes:
        enabled: false
    management:
      endpoint:
        health:
          probes:
            enabled: true
          show-components: always
          show-details: always
      endpoints:
        web:
          exposure:
            include: health,info,prometheus
      prometheus:
        metrics:
          export:
            enabled: true
    server:
      port: 8080
    spring:
      application:
        name: ssok-user-service
      cloud:
        kubernetes:
          config:
            enabled: true
            name: ssok-user-service
            namespace: ssok
            sources:
            - name: ssok-user-service
          discovery:
            all-namespaces: false
          loadbalancer:
            mode: service
          reload:
            enabled: true
          secrets:
            enabled: false
      jpa:
        hibernate:
          ddl-auto: update
        properties:
          hibernate:
            format_sql: false
            show-sql: false
      datasource:
        url: ${SPRING_DATASOURCE_URL}
        username: ${SPRING_DATASOURCE_USERNAME}
        password: ${SPRING_DATASOURCE_PASSWORD}
      data:
        redis:
          host: ${SPRING_DATA_REDIS_HOST}
          port: ${SPRING_DATA_REDIS_PORT}
    jwt:
      access-token-validity-in-seconds: ${JWT_ACCESS_TOKEN_VALIDITY_SECONDS}
      refresh-token-validity-in-seconds: ${JWT_REFRESH_TOKEN_VALIDITY_SECONDS}
      secret: ${JWT_SECRET}
    auth:
      whitelist: ${AUTH_WHITELIST}
    notification:
      server:
        url: ${EXTERNAL_NOTIFICATION_SERVICE_URL}
    bank:
      server:
        url: ${EXTERNAL_BANK_SERVICE_URL}
    aligo:
      api-key: ${ALIGO_API_KEY}
      user-id: ${ALIGO_USER_ID}
      sender: ${ALIGO_SENDER}
    aws:
      s3:
        credentials:
          access-key: ${AWS_S3_ACCESS_KEY}
          secret-key: ${AWS_S3_SECRET_KEY}
        region: ${AWS_S3_REGION}
        bucket: ${AWS_S3_BUCKET}
        profile-image-path: ${AWS_S3_PROFILE_IMAGE_PATH}
---
# Source: ssok-user-service/templates/fluentbit-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config-user
  namespace: ssok
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Daemon        Off
        Log_Level     info
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
    
    [INPUT]
        Name              tail
        Path              /var/log/ssok-user-service.log
        Parser            json
        Tag               user.log
        Refresh_Interval  5
        Mem_Buf_Limit     10MB
        Skip_Long_Lines   On
    
    [OUTPUT]
        Name              forward
        Match             user.*
        Host              fluentd-aggregator.logging.svc.cluster.local
        Port              24224
  parsers.conf: |-
    [PARSER]
        Name              json
        Format            json
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z
---
# Source: ssok-user-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ssok-user-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-user-service
    app.kubernetes.io/instance: ssok-user-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: ssok-user-service
    app.kubernetes.io/instance: ssok-user-service
  ports:
    - name: web
      port: 80
      targetPort: 8080
  type: ClusterIP
---
# Source: ssok-user-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssok-user-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-user-service
    app.kubernetes.io/instance: ssok-user-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ssok-user-service
      app.kubernetes.io/instance: ssok-user-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ssok-user-service
        app.kubernetes.io/instance: ssok-user-service
    spec:
      serviceAccountName: ssok-user-service-sa
      containers:
        - name: ssok-user-service
          image: "kudong/ssok-user-service:latest"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: ssok-user-service
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: config-volume
              mountPath: /config
          env:
            - name: SPRING_CONFIG_LOCATION
              value: file:/config/application.yml
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 20
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 180
            periodSeconds: 20
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi

        - name: fluent-bit
          image: cr.fluentbit.io/fluent/fluent-bit:4.0.2
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
          resources:
            limits:
              memory: 100Mi
              cpu: 100m

      volumes:
        - name: config-volume
          configMap:
            name: ssok-user-service
        - name: varlog
          emptyDir: {}
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config-user
---
# Source: ssok-user-service/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ssok-user-service-hpa
  namespace: ssok
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ssok-user-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 90
        type: Utilization
    type: Resource
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 30
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 15
        type: Percent
        value: 100
      - periodSeconds: 15
        type: Pods
        value: 2
      selectPolicy: Max
      stabilizationWindowSeconds: 0
---
# Source: ssok-user-service/templates/batch.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ssok-user-service-discord-notification
  namespace: ssok
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "10"  # 모든 배포 완료 후
spec:
  template:
    spec:
      containers:
      - name: discord-notify
        image: curlimages/curl:latest
        env:
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: ssok-user-service-discord-webhook
              key: webhook-url
        command:
        - sh
        - -c
        - |
          DEPLOY_TIME=$(date "+%Y-%m-%d %H:%M:%S")
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"✅ [DEV] ssok-user-service 배포 성공\",
                   \"description\": \"모든 컴포넌트가 정상적으로 배포되었습니다.\",
                   \"color\": 65280,
                   \"fields\": [
                     {
                       \"name\": \"🏦 애플리케이션\",
                       \"value\": \"ssok-user-service\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"📦 네임스페이스\",
                       \"value\": \"ssok\", 
                       \"inline\": true
                     },
                     {
                       \"name\": \"⏰ 배포 시간\",
                       \"value\": \"$DEPLOY_TIME\",
                       \"inline\": false
                     }
                   ],
                   \"footer\": {
                     \"text\": \"ArgoCD PostSync Hook\"
                   }
                 }]
               }" \
               "$WEBHOOK_URL"
      restartPolicy: Never
      serviceAccountName: default  # kubectl 권한 필요 시 별도 ServiceAccount 생성
---
# Source: ssok-user-service/templates/batch.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ssok-user-service-discord-failure-notification
  namespace: ssok
  annotations:
    argocd.argoproj.io/hook: SyncFail
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "10"  # 모든 배포 완료 후
spec:
  template:
    spec:
      containers:
      - name: discord-notify
        image: curlimages/curl:latest
        env:
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: ssok-user-service-discord-webhook
              key: webhook-url
        command:
        - sh
        - -c
        - |
          DEPLOY_TIME=$(date "+%Y-%m-%d %H:%M:%S")
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"❌ ssok-user-service 배포 실패\",
                   \"description\": \"ssok-user-service 배포 중 오류가 발생했습니다.\",
                   \"color\": 16711680,
                   \"fields\": [
                     {
                       \"name\": \"🏦 애플리케이션\",
                       \"value\": \"ssok-user-service\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"📦 네임스페이스\",
                       \"value\": \"ssok\", 
                       \"inline\": true
                     },
                     {
                       \"name\": \"⏰ 시간\",
                       \"value\": \"$DEPLOY_TIME\",
                       \"inline\": false
                     }
                   ]
                 }]
               }" \
               "$WEBHOOK_URL"
      restartPolicy: Never
