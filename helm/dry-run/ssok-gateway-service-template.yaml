---
# Source: ssok-gateway-service/templates/batch.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ssok-gateway-service-discord-webhook
  namespace: ssok
type: Opaque
data:
  webhook-url: aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM4MjExNzgxOTI4MTU3NjExNi92dUFIVFVVb19qdmpIeExQTjFjTnRZR1RmZW0tVTBudzN2Y25ZUkVUT3YyU2s3d3p3VFAwQmROS3hnR1I5Z0pYcGhQcw==
  ssom-url: aHR0cDovL3Nzb20tYmFja2VuZC5zc29tLnN2Yy5jbHVzdGVyLmxvY2FsOjgwODAvYXBpL2FsZXJ0L2Rldm9wcw==
---
# Source: ssok-gateway-service/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ssok-gateway-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-gateway-service
    app.kubernetes.io/instance: ssok-gateway-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  SPRING_DATA_REDIS_HOST: "localhost"
  SPRING_DATA_REDIS_PORT: "6379"
  JWT_SECRET: "defaultSecret"
  AUTH_WHITELIST: "/api/auth/login,/api/auth/refresh,/api/users/signup,/api/users/phone,/api/users/phone/verify"
  EXTERNAL_NOTIFICATION_SERVICE_URL: "http://localhost"
---
# Source: ssok-gateway-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ssok-gateway-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-gateway-service
    app.kubernetes.io/instance: ssok-gateway-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |
    management:
      endpoint:
        health:
          probes:
            enabled: true
          show-components: always
          show-details: always
      endpoints:
        web:
          exposure:
            include: health,info,prometheus
      health:
        kubernetes:
          enabled: false
      metrics:
        tags:
          application: ssok-gateway-service
      prometheus:
        metrics:
          export:
            enabled: true
    server:
      port: 8080
    spring:
      application:
        name: ssok-gateway-service
      cloud:
        gateway:
          routes:
          - id: user-service
            predicates:
            - Path=/api/auth/**, /api/users/**
            uri: http://ssok-user-service.ssok.svc.cluster.local
          - id: account-service
            predicates:
            - Path=/api/accounts/**
            uri: http://ssok-account-service.ssok.svc.cluster.local
          - id: transfer-service
            predicates:
            - Path=/api/transfers/**
            uri: http://ssok-transfer-service.ssok.svc.cluster.local
          - id: notification-service
            predicates:
            - Path=/api/notification/**
            uri: http://ssok-notification-service.ssok.svc.cluster.local
          - id: bluetooth-service
            predicates:
            - Path=/api/bluetooth/**
            uri: http://ssok-bluetooth-service.ssok.svc.cluster.local
        kubernetes:
          config:
            enabled: true
            name: ssok-gateway-service
            namespace: ssok
            sources:
            - name: ssok-gateway-service
          discovery:
            all-namespaces: false
          loadbalancer:
            mode: service
          reload:
            enabled: true
          secrets:
            enabled: false
      data:
        redis:
          host: ${SPRING_DATA_REDIS_HOST}
          port: ${SPRING_DATA_REDIS_PORT}
      jwt:
        secret: ${JWT_SECRET}
    auth:
      whitelist: ${AUTH_WHITELIST}
    external:
      notification-service:
        url: ${EXTERNAL_NOTIFICATION_SERVICE_URL}
---
# Source: ssok-gateway-service/templates/fluentbit-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config-gateway
  namespace: ssok
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Daemon        Off
        Log_Level     info
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
    
    [INPUT]
        Name              tail
        Path              /var/log/ssok-gateway-service.log
        Parser            json
        Tag               gateway.log
        Refresh_Interval  5
        Mem_Buf_Limit     10MB
        Skip_Long_Lines   On
    
    [OUTPUT]
        Name              forward
        Match             gateway.*
        Host              fluentd-aggregator.logging.svc.cluster.local
        Port              24224
  parsers.conf: |-
    [PARSER]
        Name              json
        Format            json
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z
---
# Source: ssok-gateway-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ssok-gateway-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-gateway-service
    app.kubernetes.io/instance: ssok-gateway-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: ssok-gateway-service
    app.kubernetes.io/instance: ssok-gateway-service
  ports:
    - name: web
      port: 80
      targetPort: 8080
    - name: dev
      port: 31080
      targetPort: 8080
      nodePort: 31080
  type: NodePort
---
# Source: ssok-gateway-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssok-gateway-service
  namespace: ssok
  labels:
    app.kubernetes.io/name: ssok-gateway-service
    app.kubernetes.io/instance: ssok-gateway-service
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  revisionHistoryLimit: 1
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0    # 용량 감소 방지 (몇 개까지 동시에 죽여도 되나)
      maxSurge: 25%       # 여유 Pod 먼저 생성 (몇 개까지 추가로 만들어도 되나?)
  selector:
    matchLabels:
      app.kubernetes.io/name: ssok-gateway-service
      app.kubernetes.io/instance: ssok-gateway-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ssok-gateway-service
        app.kubernetes.io/instance: ssok-gateway-service
    spec:
      terminationGracePeriodSeconds: 60 # Kubernetes가 Pod를 강제로 죽이기 전에 얼마나 기다려줄지 정한다.
      serviceAccountName: ssok-gateway-service-sa
      containers:
        - name: ssok-gateway-service
          image: "kudong/ssok-gateway-service:latest"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: ssok-gateway-service
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: config-volume
              mountPath: /config
          env:
            - name: SPRING_CONFIG_LOCATION
              value: file:/config/application.yml
          readinessProbe: # Pod가 트래픽 받을 준비 확인
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 5 # 5 초마다 체크
          livenessProbe: # Pod가 살아있는지 확인 (죽은 Pod 재시작)
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 180
            periodSeconds: 30
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10

        - name: fluent-bit
          image: cr.fluentbit.io/fluent/fluent-bit:4.0.2
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
          resources:
            limits:
              memory: 100Mi
              cpu: 100m

      volumes:
        - name: config-volume
          configMap:
            name: ssok-gateway-service
        - name: varlog
          emptyDir: {}
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config-gateway
---
# Source: ssok-gateway-service/templates/batch.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ssok-gateway-service-discord-notification
  namespace: ssok
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "10"  # 모든 배포 완료 후
spec:
  template:
    spec:
      containers:
      - name: discord-notify
        image: curlimages/curl:latest
        env:
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: ssok-gateway-service-discord-webhook
              key: webhook-url
        - name: SSOM_URL
          valueFrom:
            secretKeyRef:
              name: ssok-gateway-service-discord-webhook
              key: ssom-url          
        command:
        - sh
        - -c
        - |
          UTC_TIMESTAMP=$(date -u +%s)
          KST_TIMESTAMP=$((UTC_TIMESTAMP + 32400))
          DEPLOY_TIME=$(date -u -d @$KST_TIMESTAMP "+%Y-%m-%dT%H:%M:%S")
          DEPLOY_TIME_DISPLAY=$(echo "$DEPLOY_TIME" | sed 's/T/ /')
          curl --connect-timeout 2 --fail -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"✅ [DEV] ssok-gateway-service 배포 성공\",
                   \"description\": \"모든 컴포넌트가 정상적으로 배포되었습니다.\",
                   \"color\": 65280,
                   \"fields\": [
                     {
                       \"name\": \"🏦 애플리케이션\",
                       \"value\": \"ssok-gateway-service\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"📦 네임스페이스\",
                       \"value\": \"ssok\", 
                       \"inline\": true
                     },
                     {
                       \"name\": \"⏰ 배포 시간\",
                       \"value\": \"$DEPLOY_TIME_DISPLAY\",
                       \"inline\": false
                     }
                   ],
                   \"footer\": {
                     \"text\": \"ArgoCD PostSync Hook\"
                   }
                 }]
               }" \
               "$WEBHOOK_URL"
          curl --connect-timeout 2 --fail -X POST \
              -H "Content-Type: application/json" \
              -d "{
                \"level\": \"INFO\",
                \"app\": \"argocd_ssok-gateway-service\",
                \"timestamp\": \"$DEPLOY_TIME\",
                \"message\": \"ArgoCD ssok-gateway-service 배포 성공 - 모든 컴포넌트가 정상적으로 배포되었습니다.\"
              }" \
              "$SSOM_URL" || true              
      restartPolicy: Never
      serviceAccountName: default  # kubectl 권한 필요 시 별도 ServiceAccount 생성
---
# Source: ssok-gateway-service/templates/batch.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ssok-gateway-service-discord-failure-notification
  namespace: ssok
  annotations:
    argocd.argoproj.io/hook: SyncFail
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "10"  # 모든 배포 완료 후
spec:
  template:
    spec:
      containers:
      - name: discord-notify
        image: curlimages/curl:latest
        env:
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: ssok-gateway-service-discord-webhook
              key: webhook-url
        - name: SSOM_URL
          valueFrom:
            secretKeyRef:
              name: ssok-gateway-service-discord-webhook
              key: ssom-url              
        command:
        - sh
        - -c
        - |
          UTC_TIMESTAMP=$(date -u +%s)
          KST_TIMESTAMP=$((UTC_TIMESTAMP + 32400))
          DEPLOY_TIME=$(date -u -d @$KST_TIMESTAMP "+%Y-%m-%dT%H:%M:%S")
          DEPLOY_TIME_DISPLAY=$(echo "$DEPLOY_TIME" | sed 's/T/ /')
          curl --connect-timeout 2 --fail -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"❌ [DEV] ssok-gateway-service 배포 실패\",
                   \"description\": \"ssok-gateway-service 배포 중 오류가 발생했습니다.\",
                   \"color\": 16711680,
                   \"fields\": [
                     {
                       \"name\": \"🏦 애플리케이션\",
                       \"value\": \"ssok-gateway-service\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"📦 네임스페이스\",
                       \"value\": \"ssok\", 
                       \"inline\": true
                     },
                     {
                       \"name\": \"⏰ 시간\",
                       \"value\": \"$DEPLOY_TIME_DISPLAY\",
                       \"inline\": false
                     }
                   ]
                 }]
               }" \
               "$WEBHOOK_URL"
          curl --connect-timeout 2 --fail -X POST \
              -H "Content-Type: application/json" \
              -d "{
                \"level\": \"ERROR\",
                \"app\": \"argocd_ssok-gateway-service\",
                \"timestamp\": \"$DEPLOY_TIME\",
                \"message\": \"ArgoCD ssok-gateway-service 배포 실패 - 배포 중 오류가 발생했습니다.\"
              }" \
              "$SSOM_URL" || true              
      restartPolicy: Never
