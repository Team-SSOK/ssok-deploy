clusterName: "opensearch-cluster"
nodeGroup: "cluster-manager"
singleNode: false

masterService: "opensearch-cluster-manager-master"

# Cluster Manager 노드는 메타데이터 관리 전용
roles:
  - cluster_manager
  - remote_cluster_client

# Replica 3개 → 각 워커 노드에 1개씩 배치 (동일 AZ라도 분리됨)
replicas: 3

# 리소스 요청/제한 (노드당 1 vCPU 정도 여유)
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

opensearchJavaOpts: "-Xmx512m -Xms512m"

# 보안 플러그인 비활성화
securityConfig:
  enabled: false

extraEnvs:
  - name: DISABLE_INSTALL_DEMO_CONFIG
    value: "true"
  - name: DISABLE_SECURITY_PLUGIN
    value: "true"
  - name: DISABLE_SECURITY_DASHBOARDS_PLUGIN
    value: "true"
  # Zone 정보를 AWS EKS 노드 라벨에서 가져옴
  - name: OPENSEARCH_NODE_ATTR_ZONE
    valueFrom:
      fieldRef:
        fieldPath: metadata.labels['topology.kubernetes.io/zone']

# Persistence: AWS EBS gp3 동적 프로비저닝
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 20Gi
  storageClass: "gp2"

service:
  type: ClusterIP

config:
  opensearch.yml: |
    cluster.name: opensearch-cluster
    network.host: 0.0.0.0

    # Security Plugin 비활성화
    plugins.security.disabled: true

    # ──────────────────────────────────────────────────────
    # 1) AZ(zone) 속성 바인딩
    node.attr.zone: ${OPENSEARCH_NODE_ATTR_ZONE}
    # ──────────────────────────────────────────────────────

    # ──────────────────────────────────────────────────────
    # 2) 초기 마스터 후보 노드(Cluster Manager) 지정
    discovery.seed_hosts:
      - "opensearch-cluster-manager-0.opensearch-cluster-manager-master-headless.logging.svc.cluster.local:9300"
      - "opensearch-cluster-manager-1.opensearch-cluster-manager-master-headless.logging.svc.cluster.local:9300"
      - "opensearch-cluster-manager-2.opensearch-cluster-manager-master-headless.logging.svc.cluster.local:9300"

    cluster.initial_master_nodes:
      - "opensearch-cluster-manager-0"
      - "opensearch-cluster-manager-1"
      - "opensearch-cluster-manager-2"
    # ──────────────────────────────────────────────────────

    # ──────────────────────────────────────────────────────
    # 3) Shard Allocation Awareness (zone 기반)
    cluster.routing.allocation.awareness.attributes: "zone"
    # ──────────────────────────────────────────────────────

    # CORS 설정
    http.cors.enabled: true
    http.cors.allow-origin: "*"
    http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETE
    http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length
